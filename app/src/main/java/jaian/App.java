/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jaian;

public class App {
    private static Token token;

    public static void main(String[] args) {
        if (args.length != 1) {
            System.err.println("Invalid arguments.");
            System.exit(1);
        }

        String src = args[0];
        // トークナイズする
        token = Token.tokenize(src);

        // アセンブリの前半部分を出力
        System.out.printf(".intel_syntax noprefix\n");
        System.out.printf(".globl main\n");
        System.out.printf("main:\n");

        // 式の最初は数でなければならないので、それをチェックして
        // 最初のmov命令を出力
        System.out.printf("    mov rax, %d\n", expect_number());

        // `+ <num>` か `- <num>` というトークンの並びを消費しつつ
        // アセンブリを出力
        while (!token.at_eof()) {
            if (consume('+')) {
                System.out.printf("    add rax, %d\n", expect_number());
                continue;
            }

            expect('-');
            System.out.printf("    sub rax, %d\n", expect_number());
        }

        System.out.printf("    ret\n");
    }

    /** エラーを出力して終了 */
    // printfと同じ引数を取る
    public static void error(String fmt, Object... values) {
        System.err.printf(fmt, values);
        System.exit(1);
    }

    /** エラー位置を出力して終了 */
    public static void error_at(String fmt, Object... values) {
        System.err.println(token.src());
        System.err.printf("%" + token.idx() + "s", "");
        System.err.printf("^ ");
        System.err.printf(fmt, values);
        System.exit(1);
    }

    /**
     * 次のトークンが期待している記号の時には、トークンを1つ読み進めてtrueを返す。
     * それ以外の場合はfalseを返す。
     */
    private static boolean consume(char op) {
        if (token.kind() != TokenKind.Reserved || token.cur(0) != op) {
            return false;
        }
        token = token.next();
        return true;
    }

    /**
     * 次のトークンが期待している記号のときには、トークンを1つ読み進める。
     * それ以外の場合にはエラーを報告する。
     */
    private static void expect(char op) {
        if (token.kind() != TokenKind.Reserved || token.cur(0) != op) {
            error_at("Unexpected character: '%c'", token.cur(0));
        }
        token = token.next();
    }

    /**
     * 次のトークンが数値の場合、トークンを1つ読み進めてその数値を返す。
     * それ以外の場合にはエラーを報告する。
     */
    private static int expect_number() {
        if (token.kind() != TokenKind.Num) {
            error_at("Not a number");
        }
        int val = token.val();
        token = token.next();
        return val;
    }
}

