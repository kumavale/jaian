/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jaian;

public class App {
    private static Token token;

    public static void main(String[] args) {
        if (args.length != 1) {
            System.err.println("Invalid arguments.");
            System.exit(1);
        }

        // トークナイズしてパースする
        String src = args[0];
        token = Token.tokenize(src);
        Node node = expr();

        // アセンブリの前半部分を出力
        System.out.println(".intel_syntax noprefix");
        System.out.println(".globl main");
        System.out.println("main:");

        // 抽象構文木を下りながらコード生成
        gen(node);

        // スタックトップに式全体の値が残っているので
        // それをRAXにロードして関数からの返り値とする
        System.out.println("    pop rax");
        System.out.println("    ret");
    }

    /** エラーを出力して終了 */
    // printfと同じ引数を取る
    public static void error(String fmt, Object... values) {
        System.err.printf(fmt, values);
        System.exit(1);
    }

    /** エラー位置を出力して終了 */
    public static void error_at(String fmt, Object... values) {
        System.err.println(token.src());
        System.err.printf("%" + token.idx() + "s", "");
        System.err.printf("^ ");
        System.err.printf(fmt, values);
        System.exit(1);
    }

    /**
     * 次のトークンが期待している記号の時には、トークンを1つ読み進めてtrueを返す。
     * それ以外の場合はfalseを返す。
     */
    private static boolean consume(char op) {
        if (token.kind() != TokenKind.Reserved || token.cur(0) != op) {
            return false;
        }
        token = token.next();
        return true;
    }

    /**
     * 次のトークンが期待している記号のときには、トークンを1つ読み進める。
     * それ以外の場合にはエラーを報告する。
     */
    private static void expect(char op) {
        if (token.kind() != TokenKind.Reserved || token.cur(0) != op) {
            error_at("Unexpected character: '%c'", token.cur(0));
        }
        token = token.next();
    }

    /**
     * 次のトークンが数値の場合、トークンを1つ読み進めてその数値を返す。
     * それ以外の場合にはエラーを報告する。
     */
    private static int expect_number() {
        if (token.kind() != TokenKind.Num) {
            error_at("Not a number");
        }
        int val = token.val();
        token = token.next();
        return val;
    }

    // expr = mul ('+' mul | '-' mul)*
    private static Node expr() {
        Node node = mul();

        while (true) {
            if (consume('+')) {
                node = Node.new_node(NodeKind.Add, node, mul());
            } else if (consume('-')) {
                node = Node.new_node(NodeKind.Sub, node, mul());
            } else {
                return node;
            }
        }
    }

    // mul = primary ('*' primary | '/' primary)*
    private static Node mul() {
        Node node = primary();

        while (true) {
            if (consume('*')) {
                node = Node.new_node(NodeKind.Mul, node, primary());
            } else if (consume('/')) {
                node = Node.new_node(NodeKind.Div, node, primary());
            } else {
                return node;
            }
        }
    }

    // primary = '(' expr ')' | num
    private static Node primary() {
        // 次のトークンが '(' なら、 '(' expr ')' のはず
        if (consume('(')) {
            Node node = expr();
            expect(')');
            return node;
        }

        // そうでなければ数値のはず
        return Node.new_node_num(expect_number());
    }

    /** コード生成 */
    private static void gen(Node node) {
        if (node.kind() == NodeKind.Num) {
            System.out.printf("    push %d\n", node.val());
            return;
        }

        gen(node.lhs());
        gen(node.rhs());

        System.out.println("    pop rdi");
        System.out.println("    pop rax");

        switch (node.kind()) {
            case Add:
                System.out.println("    add rax, rdi");
                break;
            case Sub:
                System.out.println("    sub rax, rdi");
                break;
            case Mul:
                System.out.println("    imul rax, rdi");
                break;
            case Div:
                System.out.println("    cqo");
                System.out.println("    idiv rdi");
                break;
        }

        System.out.println("    push rax");
    }
}

